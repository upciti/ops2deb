import base64
import os
from pathlib import Path
from textwrap import dedent

import httpx
import pytest
from fastapi import FastAPI, HTTPException
from fastapi.responses import PlainTextResponse, Response

from ops2deb.parser import Blueprint

app = FastAPI(debug=True)


@app.get("/dists/stable/Release")
async def serve_snapshot_apt_release():
    snapshot_apt_release = """
    Origin: . stable
    Label: . stable
    Suite: stable
    Codename: stable
    Date: Thu, 11 Nov 2021 05:22:02 UTC
    Architectures: amd64
    Components: devops secops
    Description: Generated by aptly
    """
    return PlainTextResponse(content=dedent(snapshot_apt_release))


@app.get("/dists/stable/devops/binary-amd64/Packages")
async def serve_snapshot_apt_devops_binary_amd64_packages():
    snapshot_apt_devops_binary_amd64_packages = """
    Package: kube-score
    Priority: optional
    Section: python
    Installed-Size: 18315
    Maintainer: ops2deb <ops2deb@upciti.com>
    Architecture: amd64
    Version: 1.12.0-1~ops2deb
    Filename: pool/devops/k/kube-score/kube-score_1.12.0-1~ops2deb_amd64.deb
    Size: 3922220
    MD5sum: a016569e433f172fa177487f7dab444b
    SHA1: f0e3c72da12bf03fa7a864ef4c4694abe53c64f2
    SHA256: 6be2a102643da0b5d1f4ccfc1888fc06b1dcf4836fdd6d50a59af0c012c2f4b7
    Description: Kubernetes object analysis for improved reliability and security.
      kube-score is a tool that performs static code analysis of
      your Kubernetes object definitions.
    """
    return PlainTextResponse(content=dedent(snapshot_apt_devops_binary_amd64_packages))


@app.get("/dists/stable/secops/binary-amd64/Packages")
async def serve_snapshot_apt_secops_binary_amd64_packages():
    snapshot_apt_secops_binary_amd64_packages = """
    Package: great-app
    Priority: optional
    Section: python
    Installed-Size: 38226
    Maintainer: ops2deb <ops2deb@upciti.com>
    Architecture: all
    Version: 1.0.0-1~ops2deb
    Filename: pool/secops/g/great-app/great-app_1.0.0-1~ops2deb_all.deb
    Size: 9511932
    MD5sum: 9a8bb37b97b3e235f24d6a863c72dfa2
    SHA1: e3e49a07cccb660b8f5f4419ac982d10724b0ff6
    SHA256: 0898efd0c85c6c66e028b88442d2e8f1d75ef3d0d487e2b2d545a43ac2e8134e
    Description: Great package
      A detailed description of the great package

    Package: super-app
    Priority: optional
    Section: python
    Installed-Size: 131575
    Maintainer: ops2deb <ops2deb@upciti.com>
    Architecture: all
    Version: 1.0.0-1~ops2deb
    Filename: pool/secops/s/super-app/super-app_1.0.0-1~ops2deb_amd64.deb
    Size: 25678524
    MD5sum: 62f729a690646275abdc8c5414f2aa02
    SHA1: 7b3fc5a1ae0dbc18f9abb3293d12689c4e59ad33
    SHA256: 11be2fa0f0d63469a5b4f9c296f77dac69d98441c8c84f9544eb66bd8832d39f
    Description: Super package
      A detailed description of the super package
    """

    return PlainTextResponse(content=dedent(snapshot_apt_secops_binary_amd64_packages))


def build_server_response(content: bytes):
    return Response(
        base64.b64decode(content),
        status_code=200,
        media_type="application/octet-stream",
    )


@app.get("/1.0.0/dangling-symlink.tar.xz")
async def serve_dangling_symlink_tar_xz():
    return build_server_response(
        b"""/Td6WFoAAATm1rRGAgAhARYAAAB0L+Wj4AX/AGFdADIYSiE4i4ddgZh67LcVqfV6kAa92oeZZszM
        2Tg8AMYeZqxKzl9Ypxd5dz3hYKZmYWYxihSJZAW6R+XAe2ce+dJboUIlwezUAwemw+f4mQVxSk0S
        tLV2svttG83alyZFRFwAAAAALhYEWE9UVL0AAX2ADAAAAOjF2Y+xxGf7AgAAAAAEWVo="""
    )


@app.get("/{version}/{name}")
@app.head("/{version}/{name}")
async def serve_tar_gz(version: str, name: str):
    if version not in ["1.0.0", "1.1.0", "1.1.1"]:
        raise HTTPException(status_code=404)
    if "404" in name:
        raise HTTPException(status_code=404)
    if "500" in name:
        raise HTTPException(status_code=500)
    if name.endswith(".tar.gz"):
        response = b"""H4sIAAAAAAAAA+3OMQ7CMBAEQD/FH0CyjSy/xwVCFJAoCf/HFCAqqEI1U9yudF
        fceTn17dDnOewnDa3VZ+ZW02e+hHxsrYxRagkp59FDTDv+9HZft77EGNbLdbp9uf
        u1BwAAAAAAAAAAgD96AGPmdYsAKAAA"""
    else:
        response = b"aGVsbG8K"
    return build_server_response(response)


@pytest.fixture(scope="function")
def mock_httpx_client():
    real_async_client = httpx.AsyncClient

    def async_client_mock(**kwargs):
        kwargs.pop("transport", None)
        return real_async_client(app=app, **kwargs)

    httpx.AsyncClient = async_client_mock
    yield
    httpx.AsyncClient = real_async_client


@pytest.fixture(scope="function")
def tmp_working_directory(tmp_path):
    previous_cwd = os.getcwd()
    os.chdir(tmp_path)
    try:
        yield
    finally:
        os.chdir(previous_cwd)


@pytest.fixture
def blueprint_factory():
    blueprint = Blueprint(
        name="great-app",
        version="1.0.0",
        homepage="http://great-app.io",
        summary="My great app",
        description="Detailed description of the great app.",
        fetch="http://great-app.io/releases/{{version}}/great-app.tar.gz",
        script=["cp great-app_linux_{{arch}}_{{version}} {{src}}/usr/bin/great-app"],
    )

    def _blueprint_factory(construct: bool = False, **kwargs):
        blueprint_dict = blueprint.dict(exclude_defaults=True) | kwargs
        if construct is False:
            return Blueprint(**blueprint_dict)
        else:
            return Blueprint.construct(**blueprint_dict)

    return _blueprint_factory


@pytest.fixture
def configuration_path(tmp_path) -> Path:
    return tmp_path / "ops2deb-0.yml"


@pytest.fixture
def configuration_paths(tmp_path) -> list[Path]:
    return [tmp_path / f"ops2deb-{i}.yml" for i in range(10)]


@pytest.fixture
def lockfile_path(tmp_path) -> Path:
    return tmp_path / "ops2deb.lock.yml"


@pytest.fixture
def lockfile_paths(tmp_path) -> list[Path]:
    return [tmp_path / f"ops2deb-{i}.lock.yml" for i in range(10)]


@pytest.fixture
def mock_lockfile(lockfile_path) -> None:
    lockfile_content = """
    - url: http://testserver/1.0.0/dangling-symlink.tar.xz
      sha256: 7010dc76519072ceb552433f0eda2904dba197312fc9abd946cdcece65ba2af5
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.0.0/great-app-amd64.tar.gz
      sha256: f1be6dd36b503641d633765655e81cdae1ff8f7f73a2582b7468adceb5e212a9
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.0.0/great-app-armhf.tar.gz
      sha256: f1be6dd36b503641d633765655e81cdae1ff8f7f73a2582b7468adceb5e212a9
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.0.0/great-app.tar.gz
      sha256: f1be6dd36b503641d633765655e81cdae1ff8f7f73a2582b7468adceb5e212a9
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.1.0/great-app.tar.gz
      sha256: f1be6dd36b503641d633765655e81cdae1ff8f7f73a2582b7468adceb5e212a9
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.0.0/404.zip
      sha256: 5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.0.0/super-app
      sha256: 5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03
      timestamp: 2022-12-29 13:14:57+00:00
    - url: http://testserver/1.0.0/wrong_checksum-app.tar.gz
      sha256: deadbeaf
      timestamp: 2022-12-29 13:14:57+00:00
    """
    lockfile_path.write_text(dedent(lockfile_content))
