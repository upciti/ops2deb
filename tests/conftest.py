import base64
import os

import httpx
import pytest
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.responses import PlainTextResponse, Response

from ops2deb.parser import Blueprint, RemoteFile

snapshot_apt_Release = """
Origin: . stable
Label: . stable
Suite: stable
Codename: stable
Date: Thu, 11 Nov 2021 05:22:02 UTC
Architectures: amd64
Components: devops secops
Description: Generated by aptly
"""

snapshot_apt_devops_binary_amd64_Packages = """
Package: kube-score
Priority: optional
Section: python
Installed-Size: 18315
Maintainer: ops2deb <ops2deb@upciti.com>
Architecture: amd64
Version: 1.12.0-1~ops2deb
Filename: pool/devops/k/kube-score/kube-score_1.12.0-1~ops2deb_amd64.deb
Size: 3922220
MD5sum: a016569e433f172fa177487f7dab444b
SHA1: f0e3c72da12bf03fa7a864ef4c4694abe53c64f2
SHA256: 6be2a102643da0b5d1f4ccfc1888fc06b1dcf4836fdd6d50a59af0c012c2f4b7
Description: Kubernetes object analysis for improved reliability and security.
  kube-score is a tool that performs static code analysis of
  your Kubernetes object definitions.
"""

snapshot_apt_secops_binary_amd64_Packages = """
Package: great-app
Priority: optional
Section: python
Installed-Size: 38226
Maintainer: ops2deb <ops2deb@upciti.com>
Architecture: all
Version: 1.0.0-1~ops2deb
Filename: pool/secops/g/great-app/great-app_1.0.0-1~ops2deb_all.deb
Size: 9511932
MD5sum: 9a8bb37b97b3e235f24d6a863c72dfa2
SHA1: e3e49a07cccb660b8f5f4419ac982d10724b0ff6
SHA256: 0898efd0c85c6c66e028b88442d2e8f1d75ef3d0d487e2b2d545a43ac2e8134e
Description: Great package
  A detailed description of the great package

Package: super-app
Priority: optional
Section: python
Installed-Size: 131575
Maintainer: ops2deb <ops2deb@upciti.com>
Architecture: all
Version: 1.0.0-1~ops2deb
Filename: pool/secops/s/super-app/super-app_1.0.0-1~ops2deb_amd64.deb
Size: 25678524
MD5sum: 62f729a690646275abdc8c5414f2aa02
SHA1: 7b3fc5a1ae0dbc18f9abb3293d12689c4e59ad33
SHA256: 11be2fa0f0d63469a5b4f9c296f77dac69d98441c8c84f9544eb66bd8832d39f
Description: Super package
  A detailed description of the super package
"""

starlette_app = Starlette(debug=True)


@starlette_app.route("/dists/stable/Release")
async def serve_snapshot_apt_release(request: Request):
    return PlainTextResponse(content=snapshot_apt_Release)


@starlette_app.route("/dists/stable/devops/binary-amd64/Packages")
async def serve_snapshot_apt_devops_binary_amd64_packages(request: Request):
    return PlainTextResponse(content=snapshot_apt_devops_binary_amd64_Packages)


@starlette_app.route("/dists/stable/secops/binary-amd64/Packages")
async def serve_snapshot_apt_secops_binary_amd64_packages(request: Request):
    return PlainTextResponse(content=snapshot_apt_secops_binary_amd64_Packages)


def build_server_response(content: bytes, content_type: str = "application/x-gzip"):
    return Response(
        base64.b64decode(content),
        status_code=200,
        media_type=content_type,
    )


@starlette_app.route("/1.0.0/great-app-armhf.tar.gz")
@starlette_app.route("/1.1.0/great-app-armhf.tar.gz")
async def server_great_app_armhf_tar_gz(request: Request):
    return build_server_response(
        b"""H4sIAAAAAAAAA+3SPQrCQBDF8a09xVxA2Ml+5CJeYEFNgpiE3aTw9iYIYhWrIML/17xiXvGKafI
        lTcc0jmY/dhGjX1PrYD/zxTmjXqNXX1UuGKtaazBid9z0NpcpZRFTuvvQb/S+3f/UqU39TR7DLN"
        chy/IM565vZGq7cvj1NAAAAAAAAAAAAAAAAADAhie01A/zACgAAA=="""
    )


@starlette_app.route("/1.1.1/great-app-armhf.tar.gz")
async def server_great_app_armhf_1_1_1_tar_gz(request: Request):
    return build_server_response(
        b"""H4sIAAAAAAAAA+3SPQqEQAyG4ak9RS4gTCSOZ7GcQmQLfxj1/irCspXayCK8T/NBkuIr0qYmznk
        cR/ccvwnB9tSq9L950ODUNJialYU6r1ptI/EPdvpapjkmETd9uqE/ubvav1Q9LBJTI+3+B9m/2w
        AAAAAAAAAAAAAAAAAA7loBhmMfoQAoAAA="""
    )


@starlette_app.route("/1.0.0/great-app.tar.gz")
@starlette_app.route("/1.1.0/great-app.tar.gz")
@starlette_app.route("/1.1.1/great-app.tar.gz")
@starlette_app.route("/1.0.0/great-app-amd64.tar.gz")
@starlette_app.route("/1.1.0/great-app-amd64.tar.gz")
@starlette_app.route("/1.1.1/great-app-amd64.tar.gz")
async def server_great_app_tar_gz(request: Request):
    return build_server_response(
        b"""H4sIAAAAAAAAA+3OMQ7CMBAEQD/FH0CyjSy/xwVCFJAoCf/HFCAqqEI1U9yudF
        fceTn17dDnOewnDa3VZ+ZW02e+hHxsrYxRagkp59FDTDv+9HZft77EGNbLdbp9uf
        u1BwAAAAAAAAAAgD96AGPmdYsAKAAA"""
    )


@starlette_app.route("/1.0.0/super-app")
async def serve_super_app(request: Request):
    return build_server_response(b"aGVsbG8K", content_type="application/octet-stream")


@starlette_app.route("/1.1.0/bad-app.zip")
async def serve_error_500(request: Request):
    return Response(status_code=500)


@starlette_app.route("/1.0.0/dangling-symlink.tar.xz")
async def serve_dangling_symlink_tar_xz(request: Request):
    return build_server_response(
        b"""/Td6WFoAAATm1rRGAgAhARYAAAB0L+Wj4AX/AGFdADIYSiE4i4ddgZh67LcVqfV6kAa92oeZZszM
2Tg8AMYeZqxKzl9Ypxd5dz3hYKZmYWYxihSJZAW6R+XAe2ce+dJboUIlwezUAwemw+f4mQVxSk0S
tLV2svttG83alyZFRFwAAAAALhYEWE9UVL0AAX2ADAAAAOjF2Y+xxGf7AgAAAAAEWVo="""
    )


@pytest.fixture(scope="function")
def mock_httpx_client():
    real_async_client = httpx.AsyncClient

    def async_client_mock(**kwargs):
        kwargs.pop("transport", None)
        return real_async_client(app=starlette_app, **kwargs)

    httpx.AsyncClient = async_client_mock
    yield
    httpx.AsyncClient = real_async_client


@pytest.fixture(scope="function")
def tmp_working_directory(tmp_path):
    previous_cwd = os.getcwd()
    os.chdir(tmp_path)
    try:
        yield
    finally:
        os.chdir(previous_cwd)


@pytest.fixture(scope="function")
def blueprint_factory():
    blueprint = Blueprint(
        name="great-app",
        version="1.0.0",
        homepage="http://great-app.io",
        summary="My great app",
        description="Detailed description of the great app.",
        fetch=RemoteFile(
            url="http://great-app.io/releases/{{version}}/great-app.tar.gz",
            sha256="deadbeef",
        ),
        script=["cp great-app_linux_{{arch}}_{{version}} {{src}}/usr/bin/great-app"],
    )

    def _blueprint_factory(construct: bool = False, **kwargs):
        if construct is False:
            return Blueprint(**(blueprint.dict() | kwargs))
        else:
            return Blueprint.construct(**(blueprint.dict() | kwargs))

    return _blueprint_factory
